#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FutureShop")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCategory(Category instance);
  partial void UpdateCategory(Category instance);
  partial void DeleteCategory(Category instance);
  partial void InsertSubCategory(SubCategory instance);
  partial void UpdateSubCategory(SubCategory instance);
  partial void DeleteSubCategory(SubCategory instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  partial void InsertRegionMapping(RegionMapping instance);
  partial void UpdateRegionMapping(RegionMapping instance);
  partial void DeleteRegionMapping(RegionMapping instance);
  partial void InsertDisrictMapping(DisrictMapping instance);
  partial void UpdateDisrictMapping(DisrictMapping instance);
  partial void DeleteDisrictMapping(DisrictMapping instance);
  partial void InsertDealOfDay(DealOfDay instance);
  partial void UpdateDealOfDay(DealOfDay instance);
  partial void DeleteDealOfDay(DealOfDay instance);
  partial void InsertUserRegister(UserRegister instance);
  partial void UpdateUserRegister(UserRegister instance);
  partial void DeleteUserRegister(UserRegister instance);
  partial void InsertProductOffer(ProductOffer instance);
  partial void UpdateProductOffer(ProductOffer instance);
  partial void DeleteProductOffer(ProductOffer instance);
  partial void InsertScheme(Scheme instance);
  partial void UpdateScheme(Scheme instance);
  partial void DeleteScheme(Scheme instance);
  partial void InsertBillingdetail(Billingdetail instance);
  partial void UpdateBillingdetail(Billingdetail instance);
  partial void DeleteBillingdetail(Billingdetail instance);
  partial void InsertOrderProductDetail(OrderProductDetail instance);
  partial void UpdateOrderProductDetail(OrderProductDetail instance);
  partial void DeleteOrderProductDetail(OrderProductDetail instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FutureShopConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Category> Categories
	{
		get
		{
			return this.GetTable<Category>();
		}
	}
	
	public System.Data.Linq.Table<SubCategory> SubCategories
	{
		get
		{
			return this.GetTable<SubCategory>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
	
	public System.Data.Linq.Table<RegionMapping> RegionMappings
	{
		get
		{
			return this.GetTable<RegionMapping>();
		}
	}
	
	public System.Data.Linq.Table<DisrictMapping> DisrictMappings
	{
		get
		{
			return this.GetTable<DisrictMapping>();
		}
	}
	
	public System.Data.Linq.Table<ShippingCharge> ShippingCharges
	{
		get
		{
			return this.GetTable<ShippingCharge>();
		}
	}
	
	public System.Data.Linq.Table<DealOfDay> DealOfDays
	{
		get
		{
			return this.GetTable<DealOfDay>();
		}
	}
	
	public System.Data.Linq.Table<UpdatedDeal> UpdatedDeals
	{
		get
		{
			return this.GetTable<UpdatedDeal>();
		}
	}
	
	public System.Data.Linq.Table<UserRegister> UserRegisters
	{
		get
		{
			return this.GetTable<UserRegister>();
		}
	}
	
	public System.Data.Linq.Table<ProductOffer> ProductOffers
	{
		get
		{
			return this.GetTable<ProductOffer>();
		}
	}
	
	public System.Data.Linq.Table<Scheme> Schemes
	{
		get
		{
			return this.GetTable<Scheme>();
		}
	}
	
	public System.Data.Linq.Table<Billingdetail> Billingdetails
	{
		get
		{
			return this.GetTable<Billingdetail>();
		}
	}
	
	public System.Data.Linq.Table<OrderProductDetail> OrderProductDetails
	{
		get
		{
			return this.GetTable<OrderProductDetail>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CID;
	
	private string _CategoryName;
	
	private string _PicPath;
	
	private EntitySet<SubCategory> _SubCategories;
	
	private EntitySet<Product> _Products;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    #endregion
	
	public Category()
	{
		this._SubCategories = new EntitySet<SubCategory>(new Action<SubCategory>(this.attach_SubCategories), new Action<SubCategory>(this.detach_SubCategories));
		this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CID
	{
		get
		{
			return this._CID;
		}
		set
		{
			if ((this._CID != value))
			{
				this.OnCIDChanging(value);
				this.SendPropertyChanging();
				this._CID = value;
				this.SendPropertyChanged("CID");
				this.OnCIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string CategoryName
	{
		get
		{
			return this._CategoryName;
		}
		set
		{
			if ((this._CategoryName != value))
			{
				this.OnCategoryNameChanging(value);
				this.SendPropertyChanging();
				this._CategoryName = value;
				this.SendPropertyChanged("CategoryName");
				this.OnCategoryNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PicPath", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_SubCategory", Storage="_SubCategories", ThisKey="CID", OtherKey="CID")]
	public EntitySet<SubCategory> SubCategories
	{
		get
		{
			return this._SubCategories;
		}
		set
		{
			this._SubCategories.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Products", ThisKey="CID", OtherKey="CID")]
	public EntitySet<Product> Products
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SubCategories(SubCategory entity)
	{
		this.SendPropertyChanging();
		entity.Category = this;
	}
	
	private void detach_SubCategories(SubCategory entity)
	{
		this.SendPropertyChanging();
		entity.Category = null;
	}
	
	private void attach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.Category = this;
	}
	
	private void detach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.Category = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubCategory")]
public partial class SubCategory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SCID;
	
	private int _CID;
	
	private string _SCategoryName;
	
	private string _PicPath;
	
	private EntitySet<Product> _Products;
	
	private EntityRef<Category> _Category;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSCIDChanging(int value);
    partial void OnSCIDChanged();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnSCategoryNameChanging(string value);
    partial void OnSCategoryNameChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    #endregion
	
	public SubCategory()
	{
		this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
		this._Category = default(EntityRef<Category>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SCID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SCID
	{
		get
		{
			return this._SCID;
		}
		set
		{
			if ((this._SCID != value))
			{
				this.OnSCIDChanging(value);
				this.SendPropertyChanging();
				this._SCID = value;
				this.SendPropertyChanged("SCID");
				this.OnSCIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="Int NOT NULL")]
	public int CID
	{
		get
		{
			return this._CID;
		}
		set
		{
			if ((this._CID != value))
			{
				if (this._Category.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCIDChanging(value);
				this.SendPropertyChanging();
				this._CID = value;
				this.SendPropertyChanged("CID");
				this.OnCIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SCategoryName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string SCategoryName
	{
		get
		{
			return this._SCategoryName;
		}
		set
		{
			if ((this._SCategoryName != value))
			{
				this.OnSCategoryNameChanging(value);
				this.SendPropertyChanging();
				this._SCategoryName = value;
				this.SendPropertyChanged("SCategoryName");
				this.OnSCategoryNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PicPath", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_Product", Storage="_Products", ThisKey="SCID", OtherKey="SCID")]
	public EntitySet<Product> Products
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_SubCategory", Storage="_Category", ThisKey="CID", OtherKey="CID", IsForeignKey=true)]
	public Category Category
	{
		get
		{
			return this._Category.Entity;
		}
		set
		{
			Category previousValue = this._Category.Entity;
			if (((previousValue != value) 
						|| (this._Category.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category.Entity = null;
					previousValue.SubCategories.Remove(this);
				}
				this._Category.Entity = value;
				if ((value != null))
				{
					value.SubCategories.Add(this);
					this._CID = value.CID;
				}
				else
				{
					this._CID = default(int);
				}
				this.SendPropertyChanged("Category");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.SubCategory = this;
	}
	
	private void detach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.SubCategory = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PID;
	
	private int _CID;
	
	private int _SCID;
	
	private string _ProductName;
	
	private int _Price;
	
	private string _Description;
	
	private string _BrandName;
	
	private string _PicPath;
	
	private int _TotalQuantity;
	
	private EntitySet<DealOfDay> _DealOfDays;
	
	private EntitySet<ProductOffer> _ProductOffers;
	
	private EntityRef<Category> _Category;
	
	private EntityRef<SubCategory> _SubCategory;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPIDChanging(int value);
    partial void OnPIDChanged();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnSCIDChanging(int value);
    partial void OnSCIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBrandNameChanging(string value);
    partial void OnBrandNameChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    partial void OnTotalQuantityChanging(int value);
    partial void OnTotalQuantityChanged();
    #endregion
	
	public Product()
	{
		this._DealOfDays = new EntitySet<DealOfDay>(new Action<DealOfDay>(this.attach_DealOfDays), new Action<DealOfDay>(this.detach_DealOfDays));
		this._ProductOffers = new EntitySet<ProductOffer>(new Action<ProductOffer>(this.attach_ProductOffers), new Action<ProductOffer>(this.detach_ProductOffers));
		this._Category = default(EntityRef<Category>);
		this._SubCategory = default(EntityRef<SubCategory>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PID
	{
		get
		{
			return this._PID;
		}
		set
		{
			if ((this._PID != value))
			{
				this.OnPIDChanging(value);
				this.SendPropertyChanging();
				this._PID = value;
				this.SendPropertyChanged("PID");
				this.OnPIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="Int NOT NULL")]
	public int CID
	{
		get
		{
			return this._CID;
		}
		set
		{
			if ((this._CID != value))
			{
				if (this._Category.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCIDChanging(value);
				this.SendPropertyChanging();
				this._CID = value;
				this.SendPropertyChanged("CID");
				this.OnCIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SCID", DbType="Int NOT NULL")]
	public int SCID
	{
		get
		{
			return this._SCID;
		}
		set
		{
			if ((this._SCID != value))
			{
				if (this._SubCategory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSCIDChanging(value);
				this.SendPropertyChanging();
				this._SCID = value;
				this.SendPropertyChanged("SCID");
				this.OnSCIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
	public string ProductName
	{
		get
		{
			return this._ProductName;
		}
		set
		{
			if ((this._ProductName != value))
			{
				this.OnProductNameChanging(value);
				this.SendPropertyChanging();
				this._ProductName = value;
				this.SendPropertyChanged("ProductName");
				this.OnProductNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
	public int Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string BrandName
	{
		get
		{
			return this._BrandName;
		}
		set
		{
			if ((this._BrandName != value))
			{
				this.OnBrandNameChanging(value);
				this.SendPropertyChanging();
				this._BrandName = value;
				this.SendPropertyChanged("BrandName");
				this.OnBrandNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PicPath", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalQuantity", DbType="Int NOT NULL")]
	public int TotalQuantity
	{
		get
		{
			return this._TotalQuantity;
		}
		set
		{
			if ((this._TotalQuantity != value))
			{
				this.OnTotalQuantityChanging(value);
				this.SendPropertyChanging();
				this._TotalQuantity = value;
				this.SendPropertyChanged("TotalQuantity");
				this.OnTotalQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DealOfDay", Storage="_DealOfDays", ThisKey="PID", OtherKey="PID")]
	public EntitySet<DealOfDay> DealOfDays
	{
		get
		{
			return this._DealOfDays;
		}
		set
		{
			this._DealOfDays.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductOffer", Storage="_ProductOffers", ThisKey="PID", OtherKey="PID")]
	public EntitySet<ProductOffer> ProductOffers
	{
		get
		{
			return this._ProductOffers;
		}
		set
		{
			this._ProductOffers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Category", ThisKey="CID", OtherKey="CID", IsForeignKey=true)]
	public Category Category
	{
		get
		{
			return this._Category.Entity;
		}
		set
		{
			Category previousValue = this._Category.Entity;
			if (((previousValue != value) 
						|| (this._Category.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category.Entity = null;
					previousValue.Products.Remove(this);
				}
				this._Category.Entity = value;
				if ((value != null))
				{
					value.Products.Add(this);
					this._CID = value.CID;
				}
				else
				{
					this._CID = default(int);
				}
				this.SendPropertyChanged("Category");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_Product", Storage="_SubCategory", ThisKey="SCID", OtherKey="SCID", IsForeignKey=true)]
	public SubCategory SubCategory
	{
		get
		{
			return this._SubCategory.Entity;
		}
		set
		{
			SubCategory previousValue = this._SubCategory.Entity;
			if (((previousValue != value) 
						|| (this._SubCategory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SubCategory.Entity = null;
					previousValue.Products.Remove(this);
				}
				this._SubCategory.Entity = value;
				if ((value != null))
				{
					value.Products.Add(this);
					this._SCID = value.SCID;
				}
				else
				{
					this._SCID = default(int);
				}
				this.SendPropertyChanged("SubCategory");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DealOfDays(DealOfDay entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_DealOfDays(DealOfDay entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
	
	private void attach_ProductOffers(ProductOffer entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_ProductOffers(ProductOffer entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegionMapping")]
public partial class RegionMapping : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _RID;
	
	private string _RegionName;
	
	private EntitySet<DisrictMapping> _DisrictMappings;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRIDChanging(int value);
    partial void OnRIDChanged();
    partial void OnRegionNameChanging(string value);
    partial void OnRegionNameChanged();
    #endregion
	
	public RegionMapping()
	{
		this._DisrictMappings = new EntitySet<DisrictMapping>(new Action<DisrictMapping>(this.attach_DisrictMappings), new Action<DisrictMapping>(this.detach_DisrictMappings));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int RID
	{
		get
		{
			return this._RID;
		}
		set
		{
			if ((this._RID != value))
			{
				this.OnRIDChanging(value);
				this.SendPropertyChanging();
				this._RID = value;
				this.SendPropertyChanged("RID");
				this.OnRIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string RegionName
	{
		get
		{
			return this._RegionName;
		}
		set
		{
			if ((this._RegionName != value))
			{
				this.OnRegionNameChanging(value);
				this.SendPropertyChanging();
				this._RegionName = value;
				this.SendPropertyChanged("RegionName");
				this.OnRegionNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegionMapping_DisrictMapping", Storage="_DisrictMappings", ThisKey="RID", OtherKey="RID")]
	public EntitySet<DisrictMapping> DisrictMappings
	{
		get
		{
			return this._DisrictMappings;
		}
		set
		{
			this._DisrictMappings.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DisrictMappings(DisrictMapping entity)
	{
		this.SendPropertyChanging();
		entity.RegionMapping = this;
	}
	
	private void detach_DisrictMappings(DisrictMapping entity)
	{
		this.SendPropertyChanging();
		entity.RegionMapping = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DisrictMapping")]
public partial class DisrictMapping : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DID;
	
	private int _RID;
	
	private string _District;
	
	private EntityRef<RegionMapping> _RegionMapping;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDIDChanging(int value);
    partial void OnDIDChanged();
    partial void OnRIDChanging(int value);
    partial void OnRIDChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    #endregion
	
	public DisrictMapping()
	{
		this._RegionMapping = default(EntityRef<RegionMapping>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DID
	{
		get
		{
			return this._DID;
		}
		set
		{
			if ((this._DID != value))
			{
				this.OnDIDChanging(value);
				this.SendPropertyChanging();
				this._DID = value;
				this.SendPropertyChanged("DID");
				this.OnDIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RID", DbType="Int NOT NULL")]
	public int RID
	{
		get
		{
			return this._RID;
		}
		set
		{
			if ((this._RID != value))
			{
				if (this._RegionMapping.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRIDChanging(value);
				this.SendPropertyChanging();
				this._RID = value;
				this.SendPropertyChanged("RID");
				this.OnRIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string District
	{
		get
		{
			return this._District;
		}
		set
		{
			if ((this._District != value))
			{
				this.OnDistrictChanging(value);
				this.SendPropertyChanging();
				this._District = value;
				this.SendPropertyChanged("District");
				this.OnDistrictChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegionMapping_DisrictMapping", Storage="_RegionMapping", ThisKey="RID", OtherKey="RID", IsForeignKey=true)]
	public RegionMapping RegionMapping
	{
		get
		{
			return this._RegionMapping.Entity;
		}
		set
		{
			RegionMapping previousValue = this._RegionMapping.Entity;
			if (((previousValue != value) 
						|| (this._RegionMapping.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._RegionMapping.Entity = null;
					previousValue.DisrictMappings.Remove(this);
				}
				this._RegionMapping.Entity = value;
				if ((value != null))
				{
					value.DisrictMappings.Add(this);
					this._RID = value.RID;
				}
				else
				{
					this._RID = default(int);
				}
				this.SendPropertyChanged("RegionMapping");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShippingCharges")]
public partial class ShippingCharge
{
	
	private int _RID;
	
	private int _Charges;
	
	public ShippingCharge()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RID", DbType="Int NOT NULL")]
	public int RID
	{
		get
		{
			return this._RID;
		}
		set
		{
			if ((this._RID != value))
			{
				this._RID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Charges", DbType="Int NOT NULL")]
	public int Charges
	{
		get
		{
			return this._Charges;
		}
		set
		{
			if ((this._Charges != value))
			{
				this._Charges = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DealOfDay")]
public partial class DealOfDay : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DID;
	
	private int _PID;
	
	private int _ListPrice;
	
	private int _TodaysDiscount_InPercent;
	
	private int _DiscountedPrice;
	
	private int _TodaysDeal;
	
	private System.DateTime _InsertionDate;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDIDChanging(int value);
    partial void OnDIDChanged();
    partial void OnPIDChanging(int value);
    partial void OnPIDChanged();
    partial void OnListPriceChanging(int value);
    partial void OnListPriceChanged();
    partial void OnTodaysDiscount_InPercentChanging(int value);
    partial void OnTodaysDiscount_InPercentChanged();
    partial void OnDiscountedPriceChanging(int value);
    partial void OnDiscountedPriceChanged();
    partial void OnTodaysDealChanging(int value);
    partial void OnTodaysDealChanged();
    partial void OnInsertionDateChanging(System.DateTime value);
    partial void OnInsertionDateChanged();
    #endregion
	
	public DealOfDay()
	{
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DID
	{
		get
		{
			return this._DID;
		}
		set
		{
			if ((this._DID != value))
			{
				this.OnDIDChanging(value);
				this.SendPropertyChanging();
				this._DID = value;
				this.SendPropertyChanged("DID");
				this.OnDIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="Int NOT NULL")]
	public int PID
	{
		get
		{
			return this._PID;
		}
		set
		{
			if ((this._PID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPIDChanging(value);
				this.SendPropertyChanging();
				this._PID = value;
				this.SendPropertyChanged("PID");
				this.OnPIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListPrice", DbType="Int NOT NULL")]
	public int ListPrice
	{
		get
		{
			return this._ListPrice;
		}
		set
		{
			if ((this._ListPrice != value))
			{
				this.OnListPriceChanging(value);
				this.SendPropertyChanging();
				this._ListPrice = value;
				this.SendPropertyChanged("ListPrice");
				this.OnListPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TodaysDiscount_InPercent", DbType="Int NOT NULL")]
	public int TodaysDiscount_InPercent
	{
		get
		{
			return this._TodaysDiscount_InPercent;
		}
		set
		{
			if ((this._TodaysDiscount_InPercent != value))
			{
				this.OnTodaysDiscount_InPercentChanging(value);
				this.SendPropertyChanging();
				this._TodaysDiscount_InPercent = value;
				this.SendPropertyChanged("TodaysDiscount_InPercent");
				this.OnTodaysDiscount_InPercentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountedPrice", DbType="Int NOT NULL")]
	public int DiscountedPrice
	{
		get
		{
			return this._DiscountedPrice;
		}
		set
		{
			if ((this._DiscountedPrice != value))
			{
				this.OnDiscountedPriceChanging(value);
				this.SendPropertyChanging();
				this._DiscountedPrice = value;
				this.SendPropertyChanged("DiscountedPrice");
				this.OnDiscountedPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TodaysDeal", DbType="Int NOT NULL")]
	public int TodaysDeal
	{
		get
		{
			return this._TodaysDeal;
		}
		set
		{
			if ((this._TodaysDeal != value))
			{
				this.OnTodaysDealChanging(value);
				this.SendPropertyChanging();
				this._TodaysDeal = value;
				this.SendPropertyChanged("TodaysDeal");
				this.OnTodaysDealChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertionDate", DbType="Date NOT NULL")]
	public System.DateTime InsertionDate
	{
		get
		{
			return this._InsertionDate;
		}
		set
		{
			if ((this._InsertionDate != value))
			{
				this.OnInsertionDateChanging(value);
				this.SendPropertyChanging();
				this._InsertionDate = value;
				this.SendPropertyChanged("InsertionDate");
				this.OnInsertionDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DealOfDay", Storage="_Product", ThisKey="PID", OtherKey="PID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.DealOfDays.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.DealOfDays.Add(this);
					this._PID = value.PID;
				}
				else
				{
					this._PID = default(int);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UpdatedDeals")]
public partial class UpdatedDeal
{
	
	private System.Nullable<int> _DID;
	
	private int _PID;
	
	private int _ListPrice;
	
	private int _TodaysDiscount_InPercent;
	
	private int _DiscountedPrice;
	
	private int _TodaysDeal;
	
	private System.DateTime _InsertionDate;
	
	public UpdatedDeal()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DID", DbType="Int")]
	public System.Nullable<int> DID
	{
		get
		{
			return this._DID;
		}
		set
		{
			if ((this._DID != value))
			{
				this._DID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="Int NOT NULL")]
	public int PID
	{
		get
		{
			return this._PID;
		}
		set
		{
			if ((this._PID != value))
			{
				this._PID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListPrice", DbType="Int NOT NULL")]
	public int ListPrice
	{
		get
		{
			return this._ListPrice;
		}
		set
		{
			if ((this._ListPrice != value))
			{
				this._ListPrice = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TodaysDiscount_InPercent", DbType="Int NOT NULL")]
	public int TodaysDiscount_InPercent
	{
		get
		{
			return this._TodaysDiscount_InPercent;
		}
		set
		{
			if ((this._TodaysDiscount_InPercent != value))
			{
				this._TodaysDiscount_InPercent = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountedPrice", DbType="Int NOT NULL")]
	public int DiscountedPrice
	{
		get
		{
			return this._DiscountedPrice;
		}
		set
		{
			if ((this._DiscountedPrice != value))
			{
				this._DiscountedPrice = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TodaysDeal", DbType="Int NOT NULL")]
	public int TodaysDeal
	{
		get
		{
			return this._TodaysDeal;
		}
		set
		{
			if ((this._TodaysDeal != value))
			{
				this._TodaysDeal = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertionDate", DbType="Date NOT NULL")]
	public System.DateTime InsertionDate
	{
		get
		{
			return this._InsertionDate;
		}
		set
		{
			if ((this._InsertionDate != value))
			{
				this._InsertionDate = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRegister")]
public partial class UserRegister : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserID;
	
	private string _FirstName;
	
	private string _LastName;
	
	private string _Email;
	
	private string _Password;
	
	private string _SQuestion;
	
	private string _SAnswer;
	
	private int _NewsLetter;
	
	private System.DateTime _InsertionDate;
	
	private System.Nullable<System.DateTime> _ModificationDate;
	
	private string _PlanSelected;
	
	private System.Nullable<int> _PlanDuration;
	
	private string _UserName;
	
	private EntitySet<Billingdetail> _Billingdetails;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnSQuestionChanging(string value);
    partial void OnSQuestionChanged();
    partial void OnSAnswerChanging(string value);
    partial void OnSAnswerChanged();
    partial void OnNewsLetterChanging(int value);
    partial void OnNewsLetterChanged();
    partial void OnInsertionDateChanging(System.DateTime value);
    partial void OnInsertionDateChanged();
    partial void OnModificationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModificationDateChanged();
    partial void OnPlanSelectedChanging(string value);
    partial void OnPlanSelectedChanged();
    partial void OnPlanDurationChanging(System.Nullable<int> value);
    partial void OnPlanDurationChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
	
	public UserRegister()
	{
		this._Billingdetails = new EntitySet<Billingdetail>(new Action<Billingdetail>(this.attach_Billingdetails), new Action<Billingdetail>(this.detach_Billingdetails));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SQuestion", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string SQuestion
	{
		get
		{
			return this._SQuestion;
		}
		set
		{
			if ((this._SQuestion != value))
			{
				this.OnSQuestionChanging(value);
				this.SendPropertyChanging();
				this._SQuestion = value;
				this.SendPropertyChanged("SQuestion");
				this.OnSQuestionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SAnswer", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string SAnswer
	{
		get
		{
			return this._SAnswer;
		}
		set
		{
			if ((this._SAnswer != value))
			{
				this.OnSAnswerChanging(value);
				this.SendPropertyChanging();
				this._SAnswer = value;
				this.SendPropertyChanged("SAnswer");
				this.OnSAnswerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsLetter", DbType="Int NOT NULL")]
	public int NewsLetter
	{
		get
		{
			return this._NewsLetter;
		}
		set
		{
			if ((this._NewsLetter != value))
			{
				this.OnNewsLetterChanging(value);
				this.SendPropertyChanging();
				this._NewsLetter = value;
				this.SendPropertyChanged("NewsLetter");
				this.OnNewsLetterChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertionDate", DbType="Date NOT NULL")]
	public System.DateTime InsertionDate
	{
		get
		{
			return this._InsertionDate;
		}
		set
		{
			if ((this._InsertionDate != value))
			{
				this.OnInsertionDateChanging(value);
				this.SendPropertyChanging();
				this._InsertionDate = value;
				this.SendPropertyChanged("InsertionDate");
				this.OnInsertionDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModificationDate", DbType="Date")]
	public System.Nullable<System.DateTime> ModificationDate
	{
		get
		{
			return this._ModificationDate;
		}
		set
		{
			if ((this._ModificationDate != value))
			{
				this.OnModificationDateChanging(value);
				this.SendPropertyChanging();
				this._ModificationDate = value;
				this.SendPropertyChanged("ModificationDate");
				this.OnModificationDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanSelected", DbType="VarChar(500)")]
	public string PlanSelected
	{
		get
		{
			return this._PlanSelected;
		}
		set
		{
			if ((this._PlanSelected != value))
			{
				this.OnPlanSelectedChanging(value);
				this.SendPropertyChanging();
				this._PlanSelected = value;
				this.SendPropertyChanged("PlanSelected");
				this.OnPlanSelectedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanDuration", DbType="Int")]
	public System.Nullable<int> PlanDuration
	{
		get
		{
			return this._PlanDuration;
		}
		set
		{
			if ((this._PlanDuration != value))
			{
				this.OnPlanDurationChanging(value);
				this.SendPropertyChanging();
				this._PlanDuration = value;
				this.SendPropertyChanged("PlanDuration");
				this.OnPlanDurationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(200)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegister_Billingdetail", Storage="_Billingdetails", ThisKey="UserID", OtherKey="UserId")]
	public EntitySet<Billingdetail> Billingdetails
	{
		get
		{
			return this._Billingdetails;
		}
		set
		{
			this._Billingdetails.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Billingdetails(Billingdetail entity)
	{
		this.SendPropertyChanging();
		entity.UserRegister = this;
	}
	
	private void detach_Billingdetails(Billingdetail entity)
	{
		this.SendPropertyChanging();
		entity.UserRegister = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductOffers")]
public partial class ProductOffer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OfferID;
	
	private string _Type;
	
	private int _PID;
	
	private int _Offer;
	
	private string _Plans;
	
	private System.DateTime _InsertionDate;
	
	private EntityRef<Product> _Product;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOfferIDChanging(int value);
    partial void OnOfferIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnPIDChanging(int value);
    partial void OnPIDChanged();
    partial void OnOfferChanging(int value);
    partial void OnOfferChanged();
    partial void OnPlansChanging(string value);
    partial void OnPlansChanged();
    partial void OnInsertionDateChanging(System.DateTime value);
    partial void OnInsertionDateChanged();
    #endregion
	
	public ProductOffer()
	{
		this._Product = default(EntityRef<Product>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OfferID
	{
		get
		{
			return this._OfferID;
		}
		set
		{
			if ((this._OfferID != value))
			{
				this.OnOfferIDChanging(value);
				this.SendPropertyChanging();
				this._OfferID = value;
				this.SendPropertyChanged("OfferID");
				this.OnOfferIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="Int NOT NULL")]
	public int PID
	{
		get
		{
			return this._PID;
		}
		set
		{
			if ((this._PID != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPIDChanging(value);
				this.SendPropertyChanging();
				this._PID = value;
				this.SendPropertyChanged("PID");
				this.OnPIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offer", DbType="Int NOT NULL")]
	public int Offer
	{
		get
		{
			return this._Offer;
		}
		set
		{
			if ((this._Offer != value))
			{
				this.OnOfferChanging(value);
				this.SendPropertyChanging();
				this._Offer = value;
				this.SendPropertyChanged("Offer");
				this.OnOfferChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Plans", DbType="VarChar(100)")]
	public string Plans
	{
		get
		{
			return this._Plans;
		}
		set
		{
			if ((this._Plans != value))
			{
				this.OnPlansChanging(value);
				this.SendPropertyChanging();
				this._Plans = value;
				this.SendPropertyChanged("Plans");
				this.OnPlansChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertionDate", DbType="Date NOT NULL")]
	public System.DateTime InsertionDate
	{
		get
		{
			return this._InsertionDate;
		}
		set
		{
			if ((this._InsertionDate != value))
			{
				this.OnInsertionDateChanging(value);
				this.SendPropertyChanging();
				this._InsertionDate = value;
				this.SendPropertyChanged("InsertionDate");
				this.OnInsertionDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductOffer", Storage="_Product", ThisKey="PID", OtherKey="PID", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.ProductOffers.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.ProductOffers.Add(this);
					this._PID = value.PID;
				}
				else
				{
					this._PID = default(int);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schemes")]
public partial class Scheme : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PlanID;
	
	private string _PlanName;
	
	private decimal _Price;
	
	private int _DiscountInPercentage;
	
	private int _PlanDuration;
	
	private string _PlanImage;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlanIDChanging(int value);
    partial void OnPlanIDChanged();
    partial void OnPlanNameChanging(string value);
    partial void OnPlanNameChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnDiscountInPercentageChanging(int value);
    partial void OnDiscountInPercentageChanged();
    partial void OnPlanDurationChanging(int value);
    partial void OnPlanDurationChanged();
    partial void OnPlanImageChanging(string value);
    partial void OnPlanImageChanged();
    #endregion
	
	public Scheme()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PlanID
	{
		get
		{
			return this._PlanID;
		}
		set
		{
			if ((this._PlanID != value))
			{
				this.OnPlanIDChanging(value);
				this.SendPropertyChanging();
				this._PlanID = value;
				this.SendPropertyChanged("PlanID");
				this.OnPlanIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string PlanName
	{
		get
		{
			return this._PlanName;
		}
		set
		{
			if ((this._PlanName != value))
			{
				this.OnPlanNameChanging(value);
				this.SendPropertyChanging();
				this._PlanName = value;
				this.SendPropertyChanged("PlanName");
				this.OnPlanNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0) NOT NULL")]
	public decimal Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountInPercentage", DbType="Int NOT NULL")]
	public int DiscountInPercentage
	{
		get
		{
			return this._DiscountInPercentage;
		}
		set
		{
			if ((this._DiscountInPercentage != value))
			{
				this.OnDiscountInPercentageChanging(value);
				this.SendPropertyChanging();
				this._DiscountInPercentage = value;
				this.SendPropertyChanged("DiscountInPercentage");
				this.OnDiscountInPercentageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanDuration", DbType="Int NOT NULL")]
	public int PlanDuration
	{
		get
		{
			return this._PlanDuration;
		}
		set
		{
			if ((this._PlanDuration != value))
			{
				this.OnPlanDurationChanging(value);
				this.SendPropertyChanging();
				this._PlanDuration = value;
				this.SendPropertyChanged("PlanDuration");
				this.OnPlanDurationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanImage", DbType="VarChar(500)")]
	public string PlanImage
	{
		get
		{
			return this._PlanImage;
		}
		set
		{
			if ((this._PlanImage != value))
			{
				this.OnPlanImageChanging(value);
				this.SendPropertyChanging();
				this._PlanImage = value;
				this.SendPropertyChanged("PlanImage");
				this.OnPlanImageChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Billingdetails")]
public partial class Billingdetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _BillingId;
	
	private int _UserId;
	
	private string _FullName;
	
	private string _ShippingAdd;
	
	private string _Region;
	
	private string _District;
	
	private int _Total;
	
	private int _ShippingCharges;
	
	private int _GTotal;
	
	private decimal _TransactionId;
	
	private System.DateTime _InsertionDate;
	
	private EntitySet<OrderProductDetail> _OrderProductDetails;
	
	private EntityRef<UserRegister> _UserRegister;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillingIdChanging(int value);
    partial void OnBillingIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnShippingAddChanging(string value);
    partial void OnShippingAddChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    partial void OnTotalChanging(int value);
    partial void OnTotalChanged();
    partial void OnShippingChargesChanging(int value);
    partial void OnShippingChargesChanged();
    partial void OnGTotalChanging(int value);
    partial void OnGTotalChanged();
    partial void OnTransactionIdChanging(decimal value);
    partial void OnTransactionIdChanged();
    partial void OnInsertionDateChanging(System.DateTime value);
    partial void OnInsertionDateChanged();
    #endregion
	
	public Billingdetail()
	{
		this._OrderProductDetails = new EntitySet<OrderProductDetail>(new Action<OrderProductDetail>(this.attach_OrderProductDetails), new Action<OrderProductDetail>(this.detach_OrderProductDetails));
		this._UserRegister = default(EntityRef<UserRegister>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int BillingId
	{
		get
		{
			return this._BillingId;
		}
		set
		{
			if ((this._BillingId != value))
			{
				this.OnBillingIdChanging(value);
				this.SendPropertyChanging();
				this._BillingId = value;
				this.SendPropertyChanged("BillingId");
				this.OnBillingIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
	public int UserId
	{
		get
		{
			return this._UserId;
		}
		set
		{
			if ((this._UserId != value))
			{
				if (this._UserRegister.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIdChanging(value);
				this.SendPropertyChanging();
				this._UserId = value;
				this.SendPropertyChanged("UserId");
				this.OnUserIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string FullName
	{
		get
		{
			return this._FullName;
		}
		set
		{
			if ((this._FullName != value))
			{
				this.OnFullNameChanging(value);
				this.SendPropertyChanging();
				this._FullName = value;
				this.SendPropertyChanged("FullName");
				this.OnFullNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingAdd", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string ShippingAdd
	{
		get
		{
			return this._ShippingAdd;
		}
		set
		{
			if ((this._ShippingAdd != value))
			{
				this.OnShippingAddChanging(value);
				this.SendPropertyChanging();
				this._ShippingAdd = value;
				this.SendPropertyChanged("ShippingAdd");
				this.OnShippingAddChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Region
	{
		get
		{
			return this._Region;
		}
		set
		{
			if ((this._Region != value))
			{
				this.OnRegionChanging(value);
				this.SendPropertyChanging();
				this._Region = value;
				this.SendPropertyChanged("Region");
				this.OnRegionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string District
	{
		get
		{
			return this._District;
		}
		set
		{
			if ((this._District != value))
			{
				this.OnDistrictChanging(value);
				this.SendPropertyChanging();
				this._District = value;
				this.SendPropertyChanged("District");
				this.OnDistrictChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int NOT NULL")]
	public int Total
	{
		get
		{
			return this._Total;
		}
		set
		{
			if ((this._Total != value))
			{
				this.OnTotalChanging(value);
				this.SendPropertyChanging();
				this._Total = value;
				this.SendPropertyChanged("Total");
				this.OnTotalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingCharges", DbType="Int NOT NULL")]
	public int ShippingCharges
	{
		get
		{
			return this._ShippingCharges;
		}
		set
		{
			if ((this._ShippingCharges != value))
			{
				this.OnShippingChargesChanging(value);
				this.SendPropertyChanging();
				this._ShippingCharges = value;
				this.SendPropertyChanged("ShippingCharges");
				this.OnShippingChargesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GTotal", DbType="Int NOT NULL")]
	public int GTotal
	{
		get
		{
			return this._GTotal;
		}
		set
		{
			if ((this._GTotal != value))
			{
				this.OnGTotalChanging(value);
				this.SendPropertyChanging();
				this._GTotal = value;
				this.SendPropertyChanged("GTotal");
				this.OnGTotalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionId", DbType="Decimal(18,0) NOT NULL")]
	public decimal TransactionId
	{
		get
		{
			return this._TransactionId;
		}
		set
		{
			if ((this._TransactionId != value))
			{
				this.OnTransactionIdChanging(value);
				this.SendPropertyChanging();
				this._TransactionId = value;
				this.SendPropertyChanged("TransactionId");
				this.OnTransactionIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertionDate", DbType="Date NOT NULL")]
	public System.DateTime InsertionDate
	{
		get
		{
			return this._InsertionDate;
		}
		set
		{
			if ((this._InsertionDate != value))
			{
				this.OnInsertionDateChanging(value);
				this.SendPropertyChanging();
				this._InsertionDate = value;
				this.SendPropertyChanged("InsertionDate");
				this.OnInsertionDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Billingdetail_OrderProductDetail", Storage="_OrderProductDetails", ThisKey="BillingId", OtherKey="BillingID")]
	public EntitySet<OrderProductDetail> OrderProductDetails
	{
		get
		{
			return this._OrderProductDetails;
		}
		set
		{
			this._OrderProductDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRegister_Billingdetail", Storage="_UserRegister", ThisKey="UserId", OtherKey="UserID", IsForeignKey=true)]
	public UserRegister UserRegister
	{
		get
		{
			return this._UserRegister.Entity;
		}
		set
		{
			UserRegister previousValue = this._UserRegister.Entity;
			if (((previousValue != value) 
						|| (this._UserRegister.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserRegister.Entity = null;
					previousValue.Billingdetails.Remove(this);
				}
				this._UserRegister.Entity = value;
				if ((value != null))
				{
					value.Billingdetails.Add(this);
					this._UserId = value.UserID;
				}
				else
				{
					this._UserId = default(int);
				}
				this.SendPropertyChanged("UserRegister");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_OrderProductDetails(OrderProductDetail entity)
	{
		this.SendPropertyChanging();
		entity.Billingdetail = this;
	}
	
	private void detach_OrderProductDetails(OrderProductDetail entity)
	{
		this.SendPropertyChanging();
		entity.Billingdetail = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderProductDetails")]
public partial class OrderProductDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OPID;
	
	private int _BillingID;
	
	private int _PID;
	
	private int _Qty;
	
	private int _SubTotal;
	
	private System.DateTime _InsertionDate;
	
	private EntityRef<Billingdetail> _Billingdetail;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOPIDChanging(int value);
    partial void OnOPIDChanged();
    partial void OnBillingIDChanging(int value);
    partial void OnBillingIDChanged();
    partial void OnPIDChanging(int value);
    partial void OnPIDChanged();
    partial void OnQtyChanging(int value);
    partial void OnQtyChanged();
    partial void OnSubTotalChanging(int value);
    partial void OnSubTotalChanged();
    partial void OnInsertionDateChanging(System.DateTime value);
    partial void OnInsertionDateChanged();
    #endregion
	
	public OrderProductDetail()
	{
		this._Billingdetail = default(EntityRef<Billingdetail>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OPID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OPID
	{
		get
		{
			return this._OPID;
		}
		set
		{
			if ((this._OPID != value))
			{
				this.OnOPIDChanging(value);
				this.SendPropertyChanging();
				this._OPID = value;
				this.SendPropertyChanged("OPID");
				this.OnOPIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingID", DbType="Int NOT NULL")]
	public int BillingID
	{
		get
		{
			return this._BillingID;
		}
		set
		{
			if ((this._BillingID != value))
			{
				if (this._Billingdetail.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBillingIDChanging(value);
				this.SendPropertyChanging();
				this._BillingID = value;
				this.SendPropertyChanged("BillingID");
				this.OnBillingIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="Int NOT NULL")]
	public int PID
	{
		get
		{
			return this._PID;
		}
		set
		{
			if ((this._PID != value))
			{
				this.OnPIDChanging(value);
				this.SendPropertyChanging();
				this._PID = value;
				this.SendPropertyChanged("PID");
				this.OnPIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int NOT NULL")]
	public int Qty
	{
		get
		{
			return this._Qty;
		}
		set
		{
			if ((this._Qty != value))
			{
				this.OnQtyChanging(value);
				this.SendPropertyChanging();
				this._Qty = value;
				this.SendPropertyChanged("Qty");
				this.OnQtyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTotal", DbType="Int NOT NULL")]
	public int SubTotal
	{
		get
		{
			return this._SubTotal;
		}
		set
		{
			if ((this._SubTotal != value))
			{
				this.OnSubTotalChanging(value);
				this.SendPropertyChanging();
				this._SubTotal = value;
				this.SendPropertyChanged("SubTotal");
				this.OnSubTotalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertionDate", DbType="Date NOT NULL")]
	public System.DateTime InsertionDate
	{
		get
		{
			return this._InsertionDate;
		}
		set
		{
			if ((this._InsertionDate != value))
			{
				this.OnInsertionDateChanging(value);
				this.SendPropertyChanging();
				this._InsertionDate = value;
				this.SendPropertyChanged("InsertionDate");
				this.OnInsertionDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Billingdetail_OrderProductDetail", Storage="_Billingdetail", ThisKey="BillingID", OtherKey="BillingId", IsForeignKey=true)]
	public Billingdetail Billingdetail
	{
		get
		{
			return this._Billingdetail.Entity;
		}
		set
		{
			Billingdetail previousValue = this._Billingdetail.Entity;
			if (((previousValue != value) 
						|| (this._Billingdetail.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Billingdetail.Entity = null;
					previousValue.OrderProductDetails.Remove(this);
				}
				this._Billingdetail.Entity = value;
				if ((value != null))
				{
					value.OrderProductDetails.Add(this);
					this._BillingID = value.BillingId;
				}
				else
				{
					this._BillingID = default(int);
				}
				this.SendPropertyChanged("Billingdetail");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
